Aaru TODO
~~~~~~~~~~~~~~~
So I don't like ORG-mode.  We're gonna do this old-school.


CURRENT
~~~~~~~~~~~~~~~~~~~~~~~~~
[ ] Find a way around parsing strings for now, so I can get on with creating some frontend.
[ ] Get the backend API up as an MVP, which means spitting out JSON when hit with a POST
[ ] remove the static pages from the api (to prevent confusion when logging into the wrong port)

NEXT
~~~~~~~~~~~~~~~~~~~~~~~~~
[ ] Start developing the frontend.


Monday, March 9, 2020
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Wednesday, March 25, 2020
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
FRONTEND STATUS
-------------------------
Redux has caused a lot of yak-shaving.
The fix is to build from the ground up:
1. build a form of the chunk thing that takes hardcoded testing data and keeps it in state.
2. build that to make an api call (without redux)
3. build redux into the app in it's most basic form
4. get chunks loaded into redux and served into the app
5. move the api call into redux

there may be more steps that have to be taken before things are truly working.  That said, there is a ton about react and redux that I simply cannot learn by doing all at once.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Thursday, March 26, 2020
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
So I made some progress today but I'm a little over it.  I've come up against the issue of {I don't want to read all that fucking manual just to get this one thing working, or IDWTRATFMJTGTOFTW} and I'm pooped and over it.  So I'm turning this TODO into a sort of journal so I can pick up where I left off (approximately.)  Part of the central issue is this:  I don't entirely understand what I'm doing yet.  There are so many damn components to making the simplest shit work and I've skipped over a lot of tutorial and base learning.

Things that are fucking me up:
- getting things to 'bubble up'.  This is supposed to make things intuitive but I don't yet have the sight to look at the code and understand where everything is coming from, or what the requirements of the system are.

So tomorrow maybe just focus on that part.  Make some generic components and have them do the thing in a limited fashion.  For now I'm gonna go do not this.




THINGS TO ADD TO THE EDITED TODO / GOALS / README
-------------------------
text highlighting for 'blind-mode' shown / not-shown text


Features for 0.1
=========================

rules
--------------------------------------------------
int length
bool blinders
int passes-to-completion
bool private

user functions
-------------------------
friending
login
privacy

features for each game
-------------------------
commenting
automated rule descriptions // invitation priming
  -  Generate a link to a project that navigates to the project + a set of introductory rules


website map
---------------
1 day - splash / home
2 days - search
0.5 day - browse
3 days - edit
2 days - project admin page
1.5 days - create profile
half hour - login
1.5 days - view profile / yours / others'

backend
---------------
db - 1 day setup + 5 days added (happens in conjunction with frontend)
??? -- misc api bugfix

Total
---------------
18 days - 3 weeks (not accounting for fudge time).

PROCESS
-------------------------
keep track of pomodoros spent on bugfixing / what parts of the site they relate to - for reflection later


